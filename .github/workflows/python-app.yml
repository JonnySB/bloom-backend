# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  integration:
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: BLOOM_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres          
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install pipenv and pipenv dependencies
        run: |
          pip install pipenv
          pipenv install
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest (pipenv)
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          pipenv run pytest -vv
        continue-on-error: true
      - name: Print Postgres logs if tests fail
        if: failure()
        run: |
          echo "Postgres logs:"
          run: |
          echo "Printing Postgres logs..."
          container_id=$(docker ps --filter "name=postgres" --format "{{.ID}}")
          if [ -n "$container_id" ]; then
            docker logs $container_id
          else
            echo "No container found for Postgres service."
          fi

    
